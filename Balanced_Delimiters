// Renata Latypova
// consulted https://bedford-computing.co.uk/learning/wp-content/uploads/2016/08/Data-Structures-and-Algorithms-in-Java-6th-Edition.pdf
import java.util.Scanner;

public class Main {
    public static void main(String[] args){
        // the instance of scanner for reading from the console
        Scanner scanner = new Scanner(System.in);
        // the instance of linked stack for keeping delimiters
        LinkedStack delimiters = new LinkedStack();
        // reading from the console n and m and reformat it to integer numbers
        String[] numbers = scanner.nextLine().split(" ");
        int n = Integer.parseInt(numbers[0]);
        int m = Integer.parseInt(numbers[1]);
        String[][] arr = new String [n][2];
        // read all possible delimiters and put them to 2-dimensional array
        for (int i = 0; i < n; i++) {
            String[] str = scanner.nextLine().split(" ");
            arr[i][0] = str[0];
            arr[i][1] = str[1];
        }
        // read the strings
        for (int i = 0; i < m; i++) {
            String[] str = scanner.nextLine().split(" ");
            int columns = 0;
            int index = 0;
            for (int j = 0; j < str.length; j++) {
                int flag = 0;
                // look if the delimiter is open or close
                // if it is open the flag is equal 1
                // if it is close the flag is equal to 2
                for (int k = 0; k < n; k++) {
                    if (arr[k][0].equals(str[j])) {
                        flag = 1;
                        index = k;
                        break;
                    } else if (arr[k][1].equals(str[j])) {
                        flag = 2;
                        index = k;
                        break;
                    }
                }
                // if delimiter is open we store in the stack the expected delimiter
                if (flag == 1) {
                    delimiters.push(arr[index][1]);
                } else if (flag == 2) {
                    // if delimiter is close we check if the stack is empty we give the exception
                     if (delimiters.isEmpty()) {
                        System.out.println("Error in line " + (i + 1) + ", column " + (j + columns + 1) +
                                ": unexpected closing token " + str[j] + ".");
                        System.exit(0);
                     // if delimiter is close and stack is not empty we check if the expected delimiter equal to present
                         // delimiter and delete it from stack
                     } else if (delimiters.top().equals(str[j])) {
                         delimiters.pop();
                     // if delimiter don't equal to expected delimiter we give the exception
                     } else {
                        System.out.println("Error in line " + (i + 1) + ", column " + (j + columns + 1) +
                                ": expected " + delimiters.top() + " but got " + str[j] + ".");
                        System.exit(0);
                    }
                }
                // checking if the stack is not empty, but get end of input
                if (i + 1 == m && j + 1 == str.length) {
                    if (!delimiters.isEmpty()) {
                        columns += str[j].length();
                        System.out.println("Error in line " + m + ", column " + (j + columns + 2) + ": expected " +
                                delimiters.top() + " but got end of input.\n");
                        System.exit(0);
                    }
                // counting columns
                } else {
                    columns += str[j].length();
                }
            }
        }
        // print if everything is ok
        System.out.println("The input is properly balanced.\n");
        System.exit(0);
    }
}
interface Stack<E> {
    E top();
    E pop();
    void push(E e);
    boolean isEmpty();
    int size();
}
class LinkedStack<E> implements Stack<E> {
    private SinglyLinkedList<E> list = new SinglyLinkedList<>(); // an empty list
    public LinkedStack() {} // new stack relies on the initially empty list
    @Override
    public int size() { return list.size(); }
    @Override
    public boolean isEmpty() { return list.isEmpty(); }
    @Override
    public void push(E element) { list.addFirst(element); }
    @Override
    public E top() { return list.first(); }
    @Override
    public E pop() { return list.removeFirst(); }
}
class SinglyLinkedList<E> {
    //nested Node class
    private static class Node<E> {
        private E element; // reference to the element stored at this node
        private Node<E> next; // reference to the subsequent node in the list
        public Node(E e, Node<E> n) {
                element = e;
                next = n;
        }
        public E getElement( ) { return element; }
        public Node<E> getNext( ) { return next; }
        public void setNext(Node<E> n) { next = n; }
    }
    // instance variables of the SinglyLinkedList
    private Node<E> head = null; // head node of the list (or null if empty)
    private Node<E> tail = null; // last node of the list (or null if empty)
    private int size = 0; // number of nodes in the list
    public SinglyLinkedList( ) { } // constructs an initially empty list
    // access methods
    public int size( ) { return size; }
    public boolean isEmpty( ) { return size == 0; }
    public E first( ) { // returns (but does not remove) the first element
        if (isEmpty( )) return null;
        return head.getElement( );
    }
    public E last( ) { // returns (but does not remove) the last element
        if (isEmpty()) return null;
        return tail.getElement();
    }
    // update methods
    public void addFirst(E e) { // adds element e to the front of the list
        head = new Node<>(e, head); // create and link a new node
        if (size == 0)
            tail = head; // special case: new node becomes tail also
        size++;
    }
    public void addLast(E e) { // adds element e to the end of the list
        Node<E> newest = new Node<>(e, null); // node will eventually be the tail
        if (isEmpty( ))
            head = newest; // special case: previously empty list
        else
            tail.setNext(newest); // new node after existing tail
        tail = newest; // new node becomes the tail
        size++;
    }
    public E removeFirst( ) { // removes and returns the first element
        if (isEmpty( )) return null; // nothing to remove
        E answer = head.getElement( );
        head = head.getNext( ); // will become null if list had only one node
        size--;
        if (size == 0)
            tail = null; // special case as list is now empty
        return answer;
    }
}
